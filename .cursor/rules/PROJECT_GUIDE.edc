너는 MCP를 사용할 수 있어.
다음 예시들을 살펴보고 적절히 활용해줘.

Node.js & Git
{ "tool": "terminal", "parameters": { "cmd": "npm install express" } }
{ "tool": "terminal", "parameters": { "cmd": "node server.js" } }
{ "tool": "terminal", "parameters": { "cmd": "git clone https://github.com/user/repo.git" } }

edit-file-lines 사용법 예시:
1. 한 줄 교체 예시 (src/app.js 파일 42번째 줄 전체를 "blue" → "bar"로 변경)
{
  "command": "edit_file_lines",
  "p": "src/app.js",
  "e": [
    {
      "startLine": 42,
      "endLine": 42,
      "content": "    console.log('bar');",
      "strMatch": "    console.log('foo');"
    }
  ],
  "dryRun": true
}

2. 여러 줄 추가 예시 (utils.py 파일 120번 라인 뒤에(121번부터) 헬퍼 함수를 추가)
{
  "command": "edit_file_lines",
  "p": "utils.py",
  "e": [
    {
      "startLine": 120,
      "endLine": 120,
      "content": "\n# helper fn\n" +
                 "def slugify(text):\n" +
                 "    return text.lower().replace(' ', '-')\n",
      "strMatch": ""    // 빈 문자열 매칭으로 삽입만 수행
    }
  ],
  "dryRun": true
}

3. 여러 줄 교체
{
  "command": "edit_file_lines",
  "p": "src/app.js",
  "e": [
    {
      "startLine": 42,       // 42번째 줄부터
      "endLine":   44,       // 44번째 줄까지
      "content":
        "    // Updated block start\n" +
        "    console.log('A');\n" +
        "    console.log('B');\n" +
        "    // Updated block end\n"
    }
  ],
  "dryRun": false
}

4. 정규표현식 매칭 예시 (regexMatch)
{
  "command": "edit_file_lines",
  "p": "utils/logger.py",
  "e": [
    {
      "startLine": 1,
      "endLine":   0,         // endLine=0은 “insert only”처럼 동작
      "content":
        "# Removed all TODO logs\n",
      "regexMatch":           // 'TODO:'로 시작하는 모든 라인 찾기
        "^.*TODO:.*$"
    }
  ],
  "dryRun": true
}

(파일 전체에서 ‘TODO:’가 포함된 라인 패턴만 찾아낸 뒤, 해당 라인을 위치에 상관없이 대체 또는 삭제 삽입할 수 있습니다 
endLine: 0을 쓰면 삽입(insert-only) 으로 동작하며, content에 빈 문자열을 주면 라인을 삭제하듯 사용할 수도 있습니다)

5. 검사 및 적용 절차
A. Dry-Run으로 미리보기 (stateId 반환 및 예상 diff 확인)
{ "dryRun": true }

B. Approve 단계로 실제 적용
{ "command": "approve_edit", "stateId": "<위에서 받은 ID>" }

C. 결과 검증
{
  "command": "get_file_lines",
  "path": "src/app.js",
  "lineNumbers": [42,43,44],
  "context": 0
}



// ──── ⑤ 터미널 래퍼(라인 편집) ────────────────
{ "tool": "terminal",
  "parameters": {
    "cmd": "edit src/index.html line 15"
  }
}

// ──── ⑥ 터미널 래퍼(디렉터리 목록) ───────────
{ "tool": "terminal",
  "parameters": {
    "cmd": "list components"
  }
}

파이썬 개발 도구
{ "tool": "terminal", "parameters": { "cmd": "python --version" } }
{ "tool": "terminal", "parameters": { "cmd": "pip install requests" } }
{ "tool": "terminal", "parameters": { "cmd": "pipx install black" } }
{ "tool": "terminal", "parameters": { "cmd": "pipenv install" } }
{ "tool": "terminal", "parameters": { "cmd": "poetry add numpy" } }
{ "tool": "terminal", "parameters": { "cmd": "pytest tests/" } }
{ "tool": "terminal", "parameters": { "cmd": "tox" } }
{ "tool": "terminal", "parameters": { "cmd": "flake8 src/" } }
{ "tool": "terminal", "parameters": { "cmd": "pylint module.py" } }
{ "tool": "terminal", "parameters": { "cmd": "black ." } }
{ "tool": "terminal", "parameters": { "cmd": "isort ." } }
{ "tool": "terminal", "parameters": { "cmd": "mypy app.py" } }
{ "tool": "terminal", "parameters": { "cmd": "coverage run -m pytest" } }
{ "tool": "terminal", "parameters": { "cmd": "python -m cProfile script.py" } }
{ "tool": "terminal", "parameters": { "cmd": "pyinstrument script.py" } }

성능·부하 테스트 도구
{ "tool": "terminal", "parameters": { "cmd": "ab -n 1000 -c 10 http://localhost:3000/" } }
{ "tool": "terminal", "parameters": { "cmd": "wrk -t2 -c100 -d30s http://localhost:3000/" } }
{ "tool": "terminal", "parameters": { "cmd": "siege -c25 -t1M http://localhost:3000/" } }
{ "tool": "terminal", "parameters": { "cmd": "locust -f locustfile.py" } }
{ "tool": "terminal", "parameters": { "cmd": "k6 run script.js" } }
{ "tool": "terminal", "parameters": { "cmd": "hey -n1000 -c50 http://localhost:3000/" } }
{ "tool": "terminal", "parameters": { "cmd": "pytest --benchmark-only" } }

 기타 유틸리티
{ "tool": "terminal", "parameters": { "cmd": "curl https://api.example.com/data" } }
{ "tool": "terminal", "parameters": { "cmd": "http GET https://api.example.com/data" } }
{ "tool": "terminal", "parameters": { "cmd": "ls -la" } }
{ "tool": "terminal", "parameters": { "cmd": "dir" } }

// MySQL 예시 (terminal tool 사용)
[
  { "tool": "terminal",
    "parameters": {
      "cmd": "mysql -uroot -p -e \"SHOW TABLES;\" shorts_generator"
    }
  },
  { "tool": "terminal",
    "parameters": {
      "cmd": "mysql -uroot -p -e \"SELECT id, title FROM videos LIMIT 5;\" shorts_generator"
    }
  },
  { "tool": "terminal",
    "parameters": {
      "cmd": "mysql -uroot -p -e \"INSERT INTO videos (title, description) VALUES ('샘플','테스트');\" shorts_generator"
    }
  },
  { "tool": "terminal",
    "parameters": {
      "cmd": "mysql -uroot -p -e \"BEGIN; UPDATE videos SET view_count = view_count + 1 WHERE id = 42; COMMIT;\" shorts_generator"
    }
  }
]


Youtube MPC Server 사용 예시
{ "tool": "terminal", "parameters": { "cmd": "youtube-data-mcp-server --transport stdio --tool getVideoDetails --params '{\"videoIds\":[\"dQw4w9WgXcQ\",\"kJQP7kiw5Fk\"]}'" } }

{ "tool": "terminal", "parameters": { "cmd": "youtube-data-mcp-server --transport stdio --tool searchVideos --params '{\"query\":\"ChatGPT tutorial\",\"maxResults\":5}'" } }

{ "tool": "terminal", "parameters": { "cmd": "youtube-data-mcp-server --transport stdio --tool getTranscripts --params '{\"videoIds\":[\"dQw4w9WgXcQ\"],\"lang\":\"ko\"}'" } }

{ "tool": "terminal", "parameters": { "cmd": "youtube-data-mcp-server --transport stdio --tool getRelatedVideos --params '{\"videoId\":\"dQw4w9WgXcQ\",\"maxResults\":5}'" } }

{ "tool": "terminal", "parameters": { "cmd": "youtube-data-mcp-server --transport stdio --tool getChannelStatistics --params '{\"channelIds\":[\"UC_x5XG1OV2P6uZZ5FSM9Ttw\"]}'" } }

{ "tool": "terminal", "parameters": { "cmd": "youtube-data-mcp-server --transport stdio --tool getChannelTopVideos --params '{\"channelId\":\"UC_x5XG1OV2P6uZZ5FSM9Ttw\",\"maxResults\":3}'" } }

{ "tool": "terminal", "parameters": { "cmd": "youtube-data-mcp-server --transport stdio --tool getVideoEngagementRatio --params '{\"videoIds\":[\"dQw4w9WgXcQ\",\"kJQP7kiw5Fk\"]}'" } }

{ "tool": "terminal", "parameters": { "cmd": "youtube-data-mcp-server --transport stdio --tool getTrendingVideos --params '{\"regionCode\":\"KR\",\"categoryId\":\"10\",\"maxResults\":5}'" } }

{ "tool": "terminal", "parameters": { "cmd": "youtube-data-mcp-server --transport stdio --tool compareVideos --params '{\"videoIds\":[\"dQw4w9WgXcQ\",\"kJQP7kiw5Fk\"]}'" } }


GIT MCP 사용법 

.gitignore 설정 : 먼저 .gitignore 파일을 프로젝트 루트에 만들고 IDE 설정 파일, 빌드 산출물, 로그, node_modules/, vendor/ 등 불필요한 항목을 명시합니다


1.  초기화 & 커밋
{
  "tool": "git",
  "parameters": {
    "subtool": "RunCommand",
    "path":    "C:/MYCLAUDE_PROJECT/myp",
    "command": "cmd",
    "args": [
      "/c",
      "git init && " +
      "echo IDE/.vs/ > .gitignore && " +
      "git add . && " +
      "git commit -m \"chore: initial project baseline\""
    ]
  }
}


2. WriteFile+diff 커밋 플로우
{
  "tool": "git",
  "parameters": {
    "subtool": "RunCommand",
    "path":    "C:/MYCLAUDE_PROJECT/myp",
    "command": "cmd",
    "args": [
      "/c",
      "git add assets/js/game-state.js && " +
      "git commit -m \"feat: change button label\""
    ]
  }
}


3. 목록 조회

{
  "tool": "git",
  "parameters": {
    "subtool": "RunCommand",
    "path":    "C:/project",
    "command": "cmd",
    "args": [
      "/c",
      "dir /S"
    ]
  }
}


4. 패턴 검색

{
  "tool": "git",
  "parameters": {
    "subtool": "RunCommand",
    "path":    "C:/project",
    "command": "cmd",
    "args": [
      "/c",
      "findstr /S /I /R \"console\\.log\" *.js"
    ]
  }
}

5. 테스트 실행 후 자동 커밋

{
  "tool": "git",
  "parameters": {
    "subtool": "RunCommand",
    "path":    "C:/project",
    "command": "cmd",
    "args": [
      "/c",
      "npm test -- --verbose && " +
      "git add . && " +
      "git commit -m \"test: auto commit\""
    ]
  }
}


6. 생성 + 커밋

{ 
  "tool": "git",
  "parameters": {
    "subtool":"RunCommand",
    "path":"C:/MYCLAUDE_PROJECT/myp",
    "command":"cmd",
    "args":[
      "/c",
      "echo SUPABASE_URL=... > .env.example && " +
      "git add .env.example && " +
      "git commit -m \"chore: add env template\""
    ]
  }
}


7. 삭제 + 커밋

{ 
  "tool":"git",
  "parameters": {
    "subtool":"RunCommand",
    "path":"C:/MYCLAUDE_PROJECT/myp",
    "command":"cmd",
    "args":[
      "/c",
      "git rm debug.log && " +
      "git commit -m \"build: drop debug log\""
    ]
  }
}

8. 읽기

{ 
  "tool":"git",
  "parameters": {
    "subtool":"RunCommand",
    "path":"C:/MYCLAUDE_PROJECT/myp",
    "command":"cmd",
    "args":[
      "/c",
      "git show HEAD:assets/js/game-state.js"
    ]
  }
}



Shrimp Task Manager 사용법
1. init_project_rules
기능: 프로젝트별 코딩 표준과 규칙을 생성하거나 업데이트합니다. 새로운 규칙 세트를 만들어 이후 작업에 일관성을 부여합니다.
예시: { "tool": "init_project_rules", "parameters": {} }


2. plan_task
기능: 사용자 요구사항을 바탕으로 작업들을 계획합니다. 
전체 목표를 달성하기 위한 세부 개발 작업 목록을 작성하며, 각 작업의 설명과 완료 조건을 정의합니다. 
(내부적으로 신규 작업들을 생성하여 Task Manager에 등록)
예시: { "tool": "plan_task", "parameters": { "description": "사용자 로그인 기능 추가" } }

3. analyze_task
기능: 계획된 작업이나 요구사항을 깊이 있게 분석합니다. 
관련 코드베이스를 검토하여 기술적 구현 가능성을 평가하고 잠재적 위험 요소를 식별합니다. 
필요한 경우 핵심 부분에 대한 의사코드(pseudocode) 형태의 예시를 제시합니다.
예시: { "tool": "analyze_task", "parameters": {} } (현재 컨텍스트의 작업을 분석)

4. process_thought
기능: 복잡한 문제를 단계적으로 사고하기 위한 추론 도구입니다. 
작업 계획 중 여러 단계의 논리적 사고 과정을 거쳐야 할 때 사용됩니다. 
각 단계마다 가설을 세우고 검증하며, 생각을 체계적으로 전개하도록 돕습니다.
예시: { "tool": "process_thought", "parameters": {} } (다음 단계의 사고를 진행)


5. reflect_task
기능: 앞서 수행한 분석 결과나 해결책에 대해 반성적 평가를 합니다. 
해결 방안의 완전성을 검토하고 최적화 기회를 찾습니다. 
최종 계획이 모범 사례에 부합하는지 점검하며, 개선이 필요한 부분을 식별합니다.
예시: { "tool": "reflect_task", "parameters": {} } (현재 계획에 대한 개선점 도출)

6. split_tasks
기능: 하나의 큰 작업을 여러 개의 하위 작업으로 분할합니다. 
복잡한 작업의 경우 논리적으로 독립적인 작은 작업들로 쪼개어 처리하며, 이 과정에서 작업 간 의존 관계와 우선순위도 함께 지정합니다. 
기존 작업 목록에 새로운 작업을 추가할 때는 추가(append), 덮어쓰기(overwrite), 선택적 갱신(selective), 전체 초기화(clearAllTasks) 네 가지 모드로 업데이트할 수 있습니다 
(기본적으로 새로운 계획 수립 시에는 clearAllTasks 모드를 사용하여 이전 미완료 작업을 모두 백업 후 제거하고 새로 작성).
예시: { "tool": "split_tasks", "parameters": { "mode": "append", "tasks": [ { "name": "DB 스키마 변경", "description": "사용자 테이블에 비밀번호 해시 필드 추가" } ] } }

7. list_tasks
기능: 현재 모든 작업 목록을 요약해서 보여줍니다. 
각각의 작업 ID, 이름, 상태(예: 진행 전, 진행 중, 완료), 우선순위, 의존 관계 등을 표 형태로 출력합니다.
예시: { "tool": "list_tasks", "parameters": {} }


8. query_task
기능: 작업 목록에서 키워드 혹은 ID로 특정 작업들을 검색합니다. 
일치하는 작업들의 간략한 정보를 리스트업해줍니다.
예시: { "tool": "query_task", "parameters": { "keyword": "로그인" } } (이 경우 "로그인"과 관련된 작업들을 검색)


9. get_task_detail
기능: 특정 작업의 상세 정보를 가져옵니다. 
작업 ID를 입력하면 해당 작업의 전체 내용(설명, 세부 구현 가이드, 성공 기준, 의존성 등)을 출력합니다. 
긴 내용도 모두 표시하여 사용자가 작업에 대한 완전한 맥락을 파악할 수 있게 해줍니다.
예시: { "tool": "get_task_detail", "parameters": { "id": "TASK-2025-0001" } }


10. delete_task
기능: 지정한 미완료 작업을 삭제합니다. 잘못 생성되었거나 더 이상 필요 없는 작업을 정리할 때 사용합니다. (이미 완료된 작업은 삭제 불가하여 기록이 보존됩니다.)
예시: { "tool": "delete_task", "parameters": { "id": "TASK-2025-0003" } }


11. execute_task
기능: 특정 ID(또는 이름)의 작업을 실행합니다. 
Task Manager에 등록된 해당 작업의 구현 절차를 진행하며, 필요한 경우 소스코드를 수정하거나 커맨드를 실행합니다. 
실행 완료 후 작업 상태를 업데이트하고 결과 요약을 제공합니다. (만약 파라미터를 비워 호출하면 남아있는 최고 우선순위 작업을 자동으로 선택하여 실행합니다.)
예시: { "tool": "execute_task", "parameters": { "id": "TASK-2025-0001" } }


12. verify_task
기능: 완료된 작업이 요구사항을 충족하는지 검증합니다. 작업의 성공 기준에 따라 결과물을 검사하고 누락된 부분이나 문제가 없는지 확인합니다. 
검증 결과 만족스럽지 않으면 관련 피드백을 제시하고, 만족하면 다음 단계로 넘어갑니다.
예시: { "tool": "verify_task", "parameters": { "id": "TASK-2025-0001" } }


13. complete_task
기능: 해당 작업을 완료 상태로 표시하고 마무리합니다. 
작업 완료 보고서를 생성하고, 다른 작업들이 이 작업을 의존하고 있었다면 그 제약을 해제하여 앞으로 수행 가능하도록 업데이트합니다. 
(일반적으로 execute_task와 verify_task를 성공적으로 마친 뒤 내부적으로 호출됩니다.)
예시: { "tool": "complete_task", "parameters": { "id": "TASK-2025-0001" } }


Shrimp Task Manager의 TaskPlanner 모드 역할:
당신은 “TaskPlanner” 역할을 수행하는 AI 비서입니다.
사용자가 제시한 요구사항이나 기능 요청을 기반으로, Shrimp Task Manager의 plan_task 도구만을 사용하여
“작업 목록”을 체계적으로 작성하세요.
- 절대로 코드 실행(execute_task)이나 수정, 터미널 명령 등을 수행하지 마세요.
- 각 작업(task)은 1–2일 내에 완료할 수 있는 단위로 쪼개고, 최대 10개 이하로 나누세요.
- 각 작업에는 명확한 완료 기준(acceptance criteria)을 반드시 포함하세요.
- 작업 간 의존 관계(dependencies)도 함께 식별해 명시하세요.
- pseudocode나 구현 가이드는 포함하지 말고, 오직 작업 이름·설명·완료 기준·의존 관계만 작성하세요.
예시 사용자 요청: “사용자 프로필 편집 기능 추가”
→ plan_task 도구 호출로 작업 리스트를 반환합니다.



Shrimp Task Manager의 TaskExecutor 모드 역할:
당신은 “TaskExecutor” 역할을 수행하는 AI 비서입니다.
Shrimp Task Manager의 execute_task, verify_task, complete_task 도구를 사용해
이미 계획된 각 작업을 실행하고 검증하세요.

- 절대로 새로운 작업 계획(plan_task)이나 분석(analyze_task) 단계를 수행하지 마세요.
- “execute_task” 도구로 지정된 작업을 실행하고, 결과를 간결히 보고하세요.
- 실행이 끝나면 “verify_task” 도구로 검증 기준을 점검하고, 부족한 부분이 있으면 피드백을 제시하세요.
- 검증을 통과하면 “complete_task” 도구로 작업을 완료 상태로 표시하세요.
- 터미널 명령이나 파일 수정이 필요하다면 Claude Desktop의 기본 MCP 도구(terminal, write_file 등)를 적절히 사용하세요.
- 각 단계별 결과만 간결히 출력하고, 중간 디버그 로그는 포함하지 마세요.

예시 명령: `{ "tool": "execute_task", "parameters": { "id": "TASK-2025-0001" } }`
→ 작업 실행 후 검증, 완료까지 차례대로 수행합니다.


다음 지침을 지켜줘.
(중요사항!!   아래 내용은 C:\MYCLAUDE_PROJECT\myp 경로와 http://localhost:3000 도메인, Supabase 데이터베이스를 기준으로 작성되었습니다)

1. 프로젝트 루트 폴더는 C:\MYCLAUDE_PROJECT\myp 야. 폴더 및 파일 생성 및 수정은 C:\MYCLAUDE_PROJECT\myp 폴더에 대해 진행해줘.
2. C:\MYCLAUDE_PROJECT\myp은 다음 웹사이트에 대한 루트 폴더야:  http://localhost:3000
3. 소스들이 많아 꼭 필요한 파일들만 읽은 후, 편집 또는 추가로 진행해줘. 
4.  파일을 write할 때에는 3개~5개의 섹션으로 나누어 먼저 하나 write하고 나머지는 edit로 추가해줘. 파일을 edit 할때에는 3개~5개의 섹션으로 나누어 순차적으로 하나씩 진행해줘.
5. 이미 개발된 내용의 규모를 키우지 않고, 테스트 및 오류 수정, 코드 완성도 높이기 작업에 집중할 거야. 이에 맞게끔 기능별 테스트 진행을 하고 오류 발견시 에러를 없애줘.
6. 데이터베이스는 Supabase를 사용해. SQL 쿼리가 필요할 때는 Supabase MCP 도구를 활용해.
7. C:\MYCLAUDE_PROJECT\myp 폴더는 http://localhost:3000을 가리켜. 
   로컬 개발 서버 실행은 server.js 또는 npm start를 사용해.
   배포는 api/index.js (Vercel 서버리스 함수)를 사용해.
8. 로그 정보는 C:\MYCLAUDE_PROJECT\myp\logs 이곳에 있어. 그래서 실행 오류는 이곳에 쌓이도록 코딩해야 해.
9. 작업을 임의로 진행하지 말고, 작업 전에 동의를 받아야 해.
10. Supabase 설정은 .env 파일에 있어. 환경변수 문제 시 확인만 하고 사용자가 직접 수정해.
   SUPABASE_URL: 프로젝트 API URL
   SUPABASE_ANON_KEY: Anonymous key
   SUPABASE_SERVICE_ROLE_KEY: Service role key 
11.  .git 이 존재하지 않으면 Git 저장소 초기화할 것  ( git init )]
12. 파일 생성 또는 수정 시, edit-file-lines로 파일 생성 또는 수정한 후, git add와 commit 수행할 것
13. 파일 삭제시 git rm 및 commit 사용할 것
14. 파일 작업 완료후 pull request 실행할 것
15. 테스트 브랜치(test)에서 충분히 검증 후 PR 머지하여 master 에 병합
16. 특별한 지시가 없는 경우라면, 자동 Agent 모드가 아닌, 한번에 하나의 작업만 진행하고 이후 지침을 기다릴 것. 하지만,특별한 지시가 있으면 그에 따라 행동할 것
17. 파일을 한번이라도 수정하면 소스가 바껴서 라인번호도 바껴. 따라서 각각의 edit_file_lines 전에 반드시 소스 위치 재확인할 것


18. 새 프로젝트를 시작하거나 큰 변경이 있을때, TaskPlanner로 작동하며, 사용자에게 Shrimp Task Manager의 프로젝트 초기화할지 물어보며, 초기화할 떄의 이점을 알려줘. 
   (프로젝트 초기화하면 프로젝트의 코딩 스타일, 규약, 아키텍처 등을 분석하여 해당 프로젝트에 맞는 규칙(rule) 세트를 생성. 이 규칙들은 이후 작업 계획 수립 시 참조되어 일관성 유지)

19. 새로운 기능 개발이나 버그 수정을 원하면 먼저 계획을 위해 TaskPlanner로 작동하며, "plan task <작업설명>" 형식을 사용해줘. 
    그럼 Shrimp Task Manager는 작업을 완수를 위한 세부 단계들을 계획함.

20. 작업 계획 검토 후 실행 준비가 되었다면 TaskExecutor로 작동하며, Shrimp Task Manager의 "execute task <작업ID 혹은 이름>" 명령으로 특정 작업을 실행할 것
21. Shrimp Task Manager의 연속 실행 모드: 한 번에 여러 작업을 자동으로 처리해 달라는 요청을 받으면, TaskExecutor로 작동하며, "continuous mode"를 요청할 것.
22. 작업 진행 전에 Shrimp Task Manager의 연속 실행 모드를 사용할 지 물어볼 것
23. 작업 완료 및 검증: 작업이 끝나면 Shrimp Task Manager는 자동으로 완료 상태를 기록하고 필요한 경우 검증 단계를 거칠 것 (TaskExecutor로 작동할 것)
   (verify_task 도구를 사용해 해당 작업 결과물이 성공 기준을 충족하는지 검사하고 부족한 점이 없는지 확인)
   (모든 것이 충족되면 complete_task를 통해 해당 작업을 완료로 표시하고, 관련된 후속 작업(의존 관계가 있는 작업)이 있다면 실행 가능 상태로 갱신)

24. 매우 중요사항: edit_file_lines 수정 작업 할 때마다, 그 전에, 항상 작업할 파일의 편집하려는 부분 근처를 확인하고 진행할 것
25. 매우 중요사항: edit_file_lines 수정 작업 진행시, 항상 반드시 "dryRun": true로 설정할 것

*** 중요사항: .env파일은 항상존재해. shrimp 작업은 함부로 삭제하지 말고, 삭제시 동의가 필요해. shrimp 작업 초기화는 함부로 진행하지 못해. 항상 동의를 받아야 해! ***



# 틀린그림찾기 웹앱 개발 가이드

## 개요
Supabase를 활용한, Google ID로 로그인하는 틀린그림찾기 웹 애플리케이션입니다.

## 중요 지침

### 개발 원칙
- 틀린 부분 탐지는 사전 처리 방식을 사용하여 미리 좌표를 계산하고 저장
- 모든 이미지와 좌표 데이터는 Supabase에 저장
- 반응형 디자인으로 모바일 및 데스크톱 모두 지원

### 작업 방법
- mcp사용.
- Shrimp Task Manager를 사용하여 작업 관리
- 파일 편집 시 edit_file_lines 사용할 때 항상 부근 내용 확인
- 작업 전 항상 이 문서 참조
- Context7을 사용하여 필요한 기술 문서 참조
- 라이브러리 문서가 필요할 때 resolve-library-id와 get-library-docs 도구를 사용하여 최신 정보 활용

### 환경 파일 관리 원칙
- `.env` 파일은 항상 존재한다고 가정하고 작업
- `.env` 파일 삭제, 재생성, 덮어쓰기 작업은 절대 금지
- 환경변수 관련 문제 발생 시 `.env` 파일 내용 확인만 하고, 수정은 사용자가 직접 처리
- 새로운 환경변수가 필요한 경우 사용자에게 추가 요청만 하고 직접 수정하지 않음

### 데이터 구조
- 이미지 세트: id, title, description, original_image_url, modified_image_url, difficulty
- 틀린 부분: id, image_set_id, x_coord, y_coord, radius
- 사용자 진행: user_id, image_set_id, completed, score, time_spent

## 기술 스택
- Frontend: HTML, CSS, JavaScript
- Backend: Supabase (인증, 데이터베이스, 스토리지)
- 인증: Google OAuth

## 개발 계획

1. **프로젝트 기본 설정**
   - Supabase 프로젝트 설정 및 연결
   - Google OAuth 인증 설정
   - 기본 파일 구조 및 페이지 레이아웃 설정

2. **사용자 인증 시스템 구축**
   - Google 로그인 구현
   - 세션 관리 및 사용자 상태 처리
   - 로그인/로그아웃 기능

3. **Supabase 데이터 모델 설계**
   - 이미지 세트 테이블 (원본/수정 이미지 쌍)
   - 틀린 부분 좌표 데이터 테이블
   - 사용자 게임 진행 상황 테이블

4. **이미지 관리 시스템**
   - Supabase Storage 설정
   - 이미지 업로드 및 관리 기능
   - 이미지 페어 연결 및 메타데이터 저장

5. **틀린 부분 탐지 및 관리 시스템**
   - 이미지 사전 처리 도구 개발 (관리자용)
   - 틀린 부분 좌표 자동 감지 알고리즘 구현
   - 감지된 좌표 데이터 Supabase에 저장 및 관리
   - 좌표 데이터 수동 편집/보정 기능

6. **게임 페이지 UI 개발**
   - 이미지 비교 화면 레이아웃
   - 틀린 부분 클릭 처리
   - 진행률 및 타이머 표시

7. **게임 로직 구현**
   - 저장된 좌표 데이터 활용 틀린 부분 감지
   - 점수 계산 시스템
   - 단계별 난이도 조절

8. **사용자 피드백 및 보상 시스템**
   - 진행 상황 저장
   - 리더보드/랭킹 시스템
   - 게임 완료 후 피드백

9. **최적화 및 테스트**
   - 응답성 최적화
   - 다양한 디바이스/브라우저 테스트
   - 오류 처리 및 예외 상황 대응

10. **배포 및 모니터링**
    - 배포 설정
    - 성능 모니터링
    - 사용자 피드백 수집

11. **차후 업그레이드 계획**
    - **난이도 시스템 강화**: 난이도별 단계 구성, 틀린 부분 수 조절, 제한 시간 설정
    - **힌트 시스템 추가**: 시간 경과 힌트, 힌트 사용 점수 차감, 포인트 구매 시스템
    - **사용자 참여 확대**: 일일 도전 과제, 연속 로그인 보상, 친구 초대 및 멀티플레이어
    - **분석 시스템**: 사용자 플레이 패턴 분석, 이탈 지점 파악, 난이도 통계

이 가이드는 개발 중 참조용으로 사용되며, 작업 진행에 따라 지속적으로 업데이트됩니다. 